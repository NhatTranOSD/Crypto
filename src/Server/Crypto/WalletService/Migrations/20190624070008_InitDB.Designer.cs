// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalletService.Data;

namespace WalletService.Migrations
{
    [DbContext(typeof(WalletContext))]
    [Migration("20190624070008_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WalletService.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("PrivateKey");

                    b.Property<Guid>("WalletId");

                    b.HasKey("Id");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WalletService.Entities.TokenConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminAddress")
                        .IsRequired();

                    b.Property<string>("ContractAddress")
                        .IsRequired();

                    b.Property<int>("Decimals");

                    b.Property<decimal>("GasLimit");

                    b.Property<double>("GasPricesInGwei");

                    b.Property<decimal>("PriceUSD");

                    b.Property<string>("TokenName")
                        .IsRequired();

                    b.Property<string>("TokenSymbol")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TokenConfiguration");
                });

            modelBuilder.Entity("WalletService.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("WalletService.Entities.WalletCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Balance");

                    b.Property<int>("CurrencyType");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<Guid>("WalletId");

                    b.HasKey("Id");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("WalletCurrencys");
                });

            modelBuilder.Entity("WalletService.Data.Entities.Account", b =>
                {
                    b.HasOne("WalletService.Entities.Wallet", "Wallet")
                        .WithOne("Account")
                        .HasForeignKey("WalletService.Data.Entities.Account", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WalletService.Entities.WalletCurrency", b =>
                {
                    b.HasOne("WalletService.Entities.Wallet", "Wallet")
                        .WithOne("WalletCurrency")
                        .HasForeignKey("WalletService.Entities.WalletCurrency", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
